Chapter2——表达式和运算符

2.1——JavaScript表达式
表达式是指能计算出值的任何可用程序单元——wiki
表达式是一种JS短语，可使JS解释器用来产生一个值——《JS权威指南》
表达式分为：
1.原始表达式
2.初始化表达式
3.函数表达式
4.属性访问表达式
5.调用表达式
6.对象创建表达式
其中2~6都是复合表达式

一：原始表达式
原始表达式有以下三种：
1.常量、直接量，如：3.14, "test"
2.关键字，如：null, this, true
3.变量，如：i, k, j

二：（数组、对象的）初始化表达式
例子：
[1,2]                           new Array(1,2)
[1,,,4]                         [1, undefined, undefined, 4]
{x:1, y:2}                      var o = new Object();o.x = 1;o.y = 2;

三：函数表达式
例子：
var fe = function(){};
(function(){console.log('hello world');})();

四：属性访问表达式
例子：
var o = {x:1};
o.x                             //访问
o['x']                          //另一种访问方式

五：调用表达式
例子：
func();                         //调用函数：func()

六：对象创建表达式
例子：
new Func(1,2);                  //创建对象并传递参数
new Object;                     //创建对象

2.2——JavaScript运算符
按照运算符的操作数的数量可以分为：
1.一元运算符                     +num
2.二元运算符                     a + b
3.三元运算符                     c?a:b
其中，二元运算符是最常用的
按照功能可以分为：
1.赋值运算符                     x += 1
2.比较运算符                     a == b
3.算术运算符                     a - b
4.位运算符                       a | b
5.逻辑运算符                     exp1 && exp2
6.字符串运算符                   "a" + "b"
7.特殊运算符                     delete obj.x

一：常用特殊运算符：
1.条件运算符——c?a:b
var val = true ? 1 : 2;         //val = 1
2.逗号运算符——a,b
从左到右依次取值，每个表达式的结果都会计算，但是，最后取最右边的值组成的表达式的结果。
var val = (1,2,3);              //val = 3
3.delete运算符——delete obj.x
用于删除对象上的属性
例1：
var obj = {x:1};
obj.x;                          //1
delete obj.x;
obj.x;                          //undefined
例2：
var obj = {};
Object.defineProperty(obj,'x',{
    configurable : false,       //configurable标签为true才能被delete
    value : 1
})
delete obj.x;                   //false
obj.x;                          //1（configurable标签为false）
4.in运算符
判断对象中有没有想要的那个key值
window.x = 1;
'x' in window;                  //true
5.instanceof,typeof（详细见Chapter1）
{} instanceof Object            //true
typeof 100 === 'number'         //true
6.new运算符
function Foo(){}
Foo.prototype.x = 1;
var obj = new Foo();
obj.x;                              //1
obj.hasOwnProperty('x');            //false（判断x这个属性是否属于直接对象属性）
obj._proto_.hasOwnProperty('x');    //true（判断x这个属性是否属于原型上的属性）
7.this运算符
this;                           //window（浏览器）
var obj = {
    func : function(){return this;}
};
obj.func();                     //obj
this的指向可以通过call，apply来改变
8.void运算符
void是一个一元运算符，不论void后面跟什么，都返回undefined
void 0                          //undefined
void(0)                         //undefined

二：运算符优先级
运算符	                                    描述
. [] ()	                                  字段访问、数组下标、函数调用以及表达式分组
++ -- - ~ ! delete new typeof void	      一元运算符、返回数据类型、对象创建、未定义值
* / %	                                  乘法、除法、取模
+ - +	                                  加法、减法、字符串连接
<< >> >>>	                              移位
< <= > >= instanceof	                  小于、小于等于、大于、大于等于、instanceof
== != === !==	                          等于、不等于、严格相等、非严格相等
&	                                      按位与
^	                                      按位异或
|	                                      按位或
&&	                                      逻辑与
||	                                      逻辑或
?:	                                      条件
= oP=	                                  赋值、运算赋值
,	                                      多重求值