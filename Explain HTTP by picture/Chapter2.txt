Chapter2：简单的HTTP协议

HTTP协议用于客户端和服务端之间的通信
请求访问文本或者图像等资源的一端称为客户端，而提供资源响应的一端称为服务端。
客户端和服务端的角色可以互换，但是，就一条通信路线来说，服务端和客户端的角色是确定的，而用HTTP协议能够明确区分哪端是客户端，哪端是服务端。

通过请求和响应的交换达成通信
HTTP协议规定，请求从客户端发出，最后服务器端响应该请求并返回。换句话说，肯定是从客户端开始建立通信的，服务器端在没有接收到请求之前不会发送响应。
下面是从客户端发送给某个HTTP服务器端的请求报文中的内容：
GET/index.html HTTP/1.1
Host:hackr.jp
起始行开头的GET表示请求访问服务器的类型，称为方法（method）。
随后的字符串index/html指明了请求访问的资源对象，也叫作请求URI（request-URI）。
最后的HTTP/1.1，即HTTP的版本号，用来提示客户端使用的HTTP协议功能。
综合来说，这段请求内容的意思是：请求访问某台HTTP服务器上的/index.html页面资源。
请求报文是由请求方法、请求URL、协议版本、可选的请求首部报文段和内容实体构成的。

例如：
POST（方法） /form/entry（URI） HTTP/1.1（协议版本）
HOST：hackr.jp
Connection: keep-alive
Content-Type: application/x-www-form-urlencoded
Content-Length: 16
（请求首部字段）
name=ueno&age=37
（内容实体）

接收到请求的服务器，会将请求内容的处理结果以响应的形式返回。
例如：
HTTP/1.1 200 OK
Data: Tue,10 Jul 2012 06:50:15 GMT
Content-Length: 362
Content-Type: text/html

<html>
......

HTTP/1.1表示服务器对应的HTTP版本
200 OK表示请求的处理结果的状态码（status code）和原因短语（reason-phrase）。
下一行显示了创建响应的日期时间，是首部字段（header field）内的一个属性。
接着以一空行分隔，之后的内容称为资源实体的主题（entity body）。
响应报文基本上由协议版本，状态码（表示请求成功或失败的数字代码）、用以解释状态码的原因短语、可选的响应首部字段以及实体构成。

HTTP是不保存状态的协议
HTTP是一种不保存状态，即无状态（stateless）协议。HTTP协议自身不对请求和响应之间的通信状态进行保存。
也就是说在HTTP这个级别，协议对于发送过的请求或响应都不做持久化处理。
使用HTTP协议，每当有新的请求发送时，就会有对应的新响应产生，协议本身并不保留之前一切的请求或响应报文的信息。
这是为了更快的处理大量事物，确保协议的可伸缩性。
但是，有时需要保存用户状态，于是引入了Cookie技术。有了Cookie再用HTTP协议通信，皆可以管理状态了

请求URI定位资源
当客户端请求访问资源而发送请求时，URI需要将作为请求报文中的请求URI包含在内。
URI为完整的请求URI:
GET http://hackr.jp/index.html HTTP/1.1
在首部字段Host中写明网络域名或IP地址:
GET /index.html HTTP/1.1
Host: hackr.jp
除此以外，如果不是访问特定资源而是对服务器本身发起请求，可以用一个*来代替请求URI。
下面这个例子就是查询HTTP服务器端支持的HTTP方法种类：
OPTIONS * HTTP/1.1


告知服务器意图的HTTP方法

1.GET：获取资源
GET方法用来请求访问已被URI识别的资源。指定的资源经服务器端解析后返回响应内容。
例1：
请求：GET /index.html HTTP/1.1
     Host:www.hackr.jp
响应：返回index.html的页面资源
例2：
请求：GET /index.html HTTP/1.1
     Host:www.hackr.jp
     If-Modified-Since:Thu,12 Jul 2012 07:30:00 GMT
响应：仅返回2012年7月12日7点30分以后更新过的index.html页面资源。如果未有内容更新，则以状态码304 Not Modified作为响应返回。

2.POST：传输实体主体
POST方法用来传输实体的主体
虽然用GET也可以传输实体的主体，但一般不用GET方法进行传输，而是用POST方法。常用来把信息传输给服务器。
例：
请求：POST /submit.cgi HTTP/1.1
     Host:www.hackr.jp
     Content-Length:1560 （1560字节的数据）
响应：返回submit.cgi接受数据的处理结果

3.PUT：传输文件
PUT方法用来传输文件。就像FTP协议的文件上传一样，要求在请求报文的主题包含文件内容，然后保存到请求URI指定的位置。
但是，由于HTTP/1.1的PUT方法自身不带验证机制，任何人都可以上传文件，存在安全性问题，因此一般的WEB网站不适用该方法。
若配合WEB应用程序的验证机制，或架构设计采用REST（REpresentational Stata Transfer，表征状态转移）标准的同类WEB网站，就可能会开放使用PUT方法。
例：
请求：PUT /example.html HTTP/1.1
     Host:www.hackr.jp
     Content-Type:text/html
     Content-Length:1560 （1560字节的数据）
响应：响应返回状态码204 No Content (比如：该html已存在于服务器上)

4.HEAD：获得报文首部
HEAD方法和GET方法一样，只是不返回报文主体部分。用于确认URI的有效性及资源更新的日期时间等。
例：
请求：HEAD /index.html HTTP/1.1
     Host:www.hackr.jp
响应：返回index.html有关的响应首部

5.DELETE：删除文件
DELETE方法用来删除文件，是与PUT相反的方法。DELETE方法按请求URI删除指定的资源。
但是，HTTP/1.1的DELETE方法本身和PUT方法一样不带验证机制，所以一般的Web网站也不适用DELETE方法。当配合Web应用程序的验证机制，或遵守REST标准时还是有可能会开放使用的。
例：
请求：DELETE /example.html HTTP/1.1
     Host:www.hackr.jp
响应：响应返回状态码204 No Content（比如：该html已从该服务器上删除）

6.OPTIONS：询问支持的方法
OPTION方法用来查询针对请求URI指定的资源支持的方法。
例：
请求：OPTIOINS * HTTP/1.1
     Host:www.hackr.jp
响应：HTTP/1.1 200 OK
     Allow:GET,POST,HEAD,OPTIONS（返回服务器支持的方法）

7.TRACE：追踪路径
TRACE方法是让Web服务器端将之前的请求通信环回给客户端的方法。
客户端通过TRACE方法可以查询发送出去的请求是怎样被加工修改/篡改的。这是因为，请求想要连接到源服务器可能会通过代理中转，TRACE方法就是用来确认连接过程中发生的一系列操作。
但是，TRACE方法本来就不怎么常用，再加上它容易引发XST（）Cross-Site Tracing，跨站追踪）攻击，通常就更不会用到了。
例：
请求：TRACE / HTTP/1.1
     Host:hackr.jp
     Max-Forwards:2
响应：HTTP/1.1 200 OK
     Content-Type:message/http
     Content-Length:1024

     TRACE / HTTP/1.1
     Host:hackr.jp
     Max-forwards:2（返回响应包含请求内容）

8.CONNECT：要求用隧道协议连接代理
CONNECT方法要求在与代理服务器通信时建立隧道，实现用隧道协议进行TCP通信。
主要使用SSL（Secure Sockets Layer，安全套接层）和TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。
格式如下：
CONNECT 代理服务器名 : 端口号 HTTP版本
例：
请求：CONNECT proxy.hackr.jp:8080 HTTP/1.1\
     Host:proxy.hackr.jp
响应：HTTP/1.1 200 OK（之后进入网络隧道）

使用方法下达命令
向请求URI指定的资源发送请求报文时，采用称为方法的命令。
方法的作用在于，可以指定请求的资源按期望产生某种行为。方法中有GET、POST和HEAD等。
方法                      说明                     支持的HTTP协议版本
GET                      获取资源                  1.0、1.1
POST                     传输实体主体               1.0、1.1
PUT                      传输文件                  1.0、1.1
HEAD                     获得报文首部               1.0、1.1
DELETE                   删除文件                  1.0、1.1
OPTIONS                  询问支持的方法             1.1
TRACE                    追踪路径                  1.1
CONNECT                  要求用隧道协议连接代理       1.1
LINK                     建立和资源之间的联系        1.1
UNLINK                   断开连接关系               1.1

持久连接节省通信量
1.持久连接
HTTP协议的初始版本中，每进行一次HTTP通信就要断开一次TCP连接。
为解决上述问题，HTTP/1.1和一部分的HTTP/1.0想出了持久连接（HTTP Persistent Connections，也称为HTTP keep-alive或HTTP connection reuse）的方法。
持久连接的特点是，只要任意一端没有明确提出断开连接，则保持TCP连接状态。
在HTTP/1.1中，所有的连接默认都是持久连接，但在HTTP/1.0内并未标准化。
虽然有一部分服务器通过非标准的手段实现，但服务器端不一定能够支持持久连接。毫无疑问，除了服务器端，客户端也需要支持持久连接。
2.管线化（比持久连接更快）
持久连接使得多数请求以管线化（pipelining）方式发送成为可能。
从前发送请求后需要等待并收到响应，才能发送下一个请求。管线化技术出现后，不用等待响应亦可直接发送下一个请求。

使用Cookie的状态管理
由于HTTP是无状态协议，而有时需要保存状态，如保持登录状态等。
保存无状态这个特征的同时又要解决类似的矛盾问题，于是加入了Cookie技术。
Cookie技术通过在请求和响应报文中写入Cookie信息来控制客户端的状态。
Cookie会根据从服务器端发送的响应报文内的一个叫做Set-Cookie的首部字段信息，通知客户端保存Cookie。
当下次客户端再往服务器发送请求时，客户端会自动在请求报文中加入Cookie值后发送出去。
服务器端发现客户端发送过来的Cookie后，会去检查究竟是从哪个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息。
例子：
请求报文（没有Cookie信息的状态）
GET /reader/ HTTP/1.1
Host: hackr.jp
*首部字段内没有Cookie的相关信息

响应报文（服务器端生成Cookie信息）
HTTP/1.1 200 OK
Date: Thu,12 Jul 2012 07:12:20 GMT
Server: Apache
<Set-Cookie: sid=1342077140226724; path=/; expires=Wed,=>
10-Oct-12 07:12:20 GMT>
Content-Type: text/plain; charset=UTF-8

请求报文（自动发送保存着的Cookie信息）
GET /image/ HTTP/1.1
Host: hackr.jp
Cookie: sid=1342077140226724