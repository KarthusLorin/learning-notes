Chapter11：Web的攻击技术

11.1——针对Web的攻击技术
简单的HTTP协议本身并不存在安全性问题，因此协议本身几乎不会成为攻击对象。
应用HTTP协议的服务器和客户端，以及运行在服务器上的Web应用等资源才是攻击目标。

11.1.1——HTTP不具备必要的安全功能
几乎现今所有的Web网站都会使用会话（session）管理、加密处理等安全性方面的功能，而HTTP协议内并不具备这些功能。
从整体上来看，HTTP就是一个通用的单纯协议机制，因此它具备较多优势，但是在安全性方面则呈劣势。
因此，开发者需要自行设计并开发认证及会话管理功能来满足Web应用的安全。

11.1.2——在客户端即可篡改请求
在Web应用中，从浏览器那接收到的HTTP请求的全部内容，都可以在客户端自由地变更、篡改，所以Web应用可能会接收到与预期数据不相同的内容。
在HTTP请求报文内加载攻击代码，就能发起对Web应用的攻击。
通过URL查询字段或表单、HTTP首部、Cookie等途径把攻击代码传入，若这时Web应用存在安全漏洞，那内部信息就会遭到窃取，或被攻击者拿到管理权限。

11.1.3——针对Web应用的攻击模式
对Web应用的攻击模式有以下两种：
1.主动攻击
2.被动攻击
一：以服务器为目标的主动攻击
主动攻击（active attack）是指攻击者通过直接访问Web应用，把攻击代码传入的攻击模式。由于该模式是直接针对服务器上的资源进行攻击，因此攻击者需要能够访问到那些资源。
主动攻击模式里具有代表性的攻击是SQL注入攻击和OS命令注入攻击。
二：以服务器为目标的被动攻击
被动攻击（passive attack）是指利用圈套策略执行攻击代码的攻击模式，在被动攻击过程中，攻击者不直接对目标Web应用访问发起攻击。
被动攻击通常的攻击模式如下所示：
步骤一：攻击者诱使用户触发已设置好的陷阱，而陷阱会启动发送已嵌入攻击代码的HTTP请求。
步骤二：当用户不知不觉中招之后，用户的浏览器或邮件客户端就会触发这个陷阱。
步骤三：中招后的用户浏览器会把含有攻击代码的HTTP请求发送给作为攻击目标的Web应用，运行攻击代码。
步骤四：执行完攻击代码，存在安全漏洞的Web应用会成为攻击者的跳板，可能导致用户所持的Cookie等个人信息被窃取，登录状态中的用户权限遭恶意滥用等后果。
被动攻击模式中具有代表性的攻击是跨站脚本攻击和跨站点请求伪造。
利用被动攻击，可发起对原本从互联网上无法直接访问的企业内网等网络的攻击，只要用户踏入攻击者预先设好的陷阱，在用户能够访问到的网络范围内，即使是企业内网也同样会受到攻击。

11.2——因输出值转义不完全引发的安全漏洞
实施Web应用的安全对策可大致分为以下两部分：
1.客户端的验证
2.Web应用端（服务器端）的验证
（1）输入值验证
（2）输出值转义
多数情况下采用JavaScript在客户端 验证数据，可是在客户端允许篡改数据或关闭JavaScript，不适合将JavaScript验证作为安全的防范对策。
保留客户端验证只是为了尽早地辨识输入错误，起到提高UI体验的作用。
Web应用端的输入值验证按Web应用内的处理则有可能被误认为是具有攻击性意义的代码。输入值验证通常是指检查是否是符合系统业务逻辑的数值或检查字符编码等预防对策。
对数据库或文件系统、HTML、邮件等输出Web应用处理的数据之际，针对输出做值转义处理是一项至关重要的安全策略，当输出值转义不完全时，会因触发攻击者传入的攻击代码，而给输出对象带来损害。

11.2.1——跨站脚本攻击
跨站脚本攻击（Cross-Site Scripting，XSS）是指通过存在安全漏洞的Web网站注册用户的浏览器内运行非法的HTML标签或JavaScript进行的一种攻击。
动态创建的HTML部分有可能隐藏着安全漏洞，就这样，攻击者编写脚本设下陷阱，用户在自己的浏览器上运行时，一不小心就会受到被动攻击。
跨站脚本攻击有可能造成以下影响：
1.利用虚假输入表单骗取用户个人信息
2.利用脚本窃取用户的Cookie值，被害者在不知情的情况下，帮助攻击者发送恶意请求
3.显示伪造的文章或图片
详细例子见书P214

11.2.2——SQL注入攻击
一：会执行非法SQL的SQL注入攻击
SQL（SQL Injection）是指针对Web应用使用的数据库，通过运行非法的SQL而产生的攻击。该安全隐患有可能引发极大的威胁，有时会直接导致个人信息及机密信息的泄露。
Web应用通常都会用到数据库，当需要对数据库表内的数据进行检索或添加、删除等操作时，会使用SQL语句连接数据库进行特定的操作。
如果在调用SQL语句的方式上存在疏忽，就有可能执行被恶意注入（Injection）非法SQL语句。
SQL注入攻击有可能会造成以下等影响：
1.非法查看或篡改数据库内的内容
2.规避认证
3.执行和数据库服务器业务关联的程序等
详细例子见书P219

11.2.3——OS命令注入攻击
OS命令注入攻击（OS Command Injection）是指通过Web应用，执行的操作系统命令达到攻击的目的，只要在能调用Shell函数的地方就有存在被攻击的风险。
可以从Web应用中通过Shell来调用操作系统命令，倘若调用Shell时存在疏漏，就可以执行插入的非法OS命令。
OS命令注入攻击可以向Shell发送命令，让Windows或Linux操作系统的命令行启动，也就是说，通过注入攻击可执行OS上安装着的各种程序。
详细例子见书P224

11.2.4——HTTP首部注入攻击
一：HTTP首部注入攻击
HTTP首部注入攻击（HTTP Header Injection）是指攻击者通过在响应首部字段内插入换行，添加任意响应首部或主体的一种攻击，属于被动攻击模式。
HTTP首部注入可以通过在某些响应首部字段需要处理输出值的地方，插入换行发动攻击。
HTTP首部注入攻击有可能造成以下一些影响：
1.设置任何Cookie信息
2.重定向至任意URL
3.显示任意的主体（HTTP响应截断攻击）
详细例子见P226
二：HTTP响应截断攻击
向首部主体内添加内容的攻击称为HTTP响应截断攻击（HTTP Response Splitting Attack）。
HTTP响应截断攻击是用在HTTP首部注入的一种攻击，攻击顺序相同，但是要将两个%0D%0A%0D%0A并排插入字符串后发送。
利用这两个连续的换行就可作出HTTP首部与主题分隔所需的空行了，这样就能显示伪造的主体，达到攻击目的，这样的攻击叫做HTTP响应截断攻击。
利用这个攻击，已触发陷阱的用户浏览器会显示伪造的Web页面，再让用户输入自己的个人信息等，可达到和跨站脚本攻击相同的效果。
另外，滥用HTTP/1.1中汇集多响应返回功能，会导致缓存服务器对任意内容进行缓存操作，这种攻击被称为缓存污染，使用该缓存服务器的用户，在浏览器遭受攻击的网站时，会不断地浏览被替换掉的Web网页。

11.2.5——邮件首部注入攻击
邮件首部注入攻击（Mail Header Injection）是指Web应用中的邮件发送功能，攻击者通过向邮件首部To或Subject内任意添加非法内容发起的攻击。
利用存在安全漏洞的Web网站，可对任意邮件地址发送广告邮件或病毒邮件。
详细例子见P228

11.2.6——目录遍历攻击
目录遍历（Directory Traversal）攻击是指对本无意公开的文件目录，通过非法截断其目录路径后，达成访问目的的一种攻击。这种攻击有时也称为路径遍历（Path Traversal）攻击。
通过Web应用对文件处理操作时，在由外部指定文件名的处理存在疏漏的情况下，用户可使用.../等相对路径定位到/etc/passed等绝对路径上。
因此，服务器上任意的文件或文件目录皆有可能被访问到，这样一来，就有可能非法浏览、篡改或删除Web服务器上的文件。
固然存在输出值转义的问题，但更应该关闭指定对任意文件名的访问权限。
详细例子见P229

11.2.7——远程文件包含漏洞
远程文件包含漏洞（Remote File Inclusion）是指当部分脚本内容需要从其他文件读入时，攻击者利用指定逮捕服务器的URL充当依赖文件，让脚本读取之后，就可允许任意脚本的一种攻击。
这主要是PHP存在的安全漏洞，对PHP的include或require来说，这是一种可通过设定，指定外部服务器的URL作为文件名的功能，但是，该功能太危险，PHP5.2.0之后默认设定此功能无效。
固然存在输出值转义的问题，但更应控制对任意文件名的指定。
详细例子见P231

11.3——因设置或设计上的缺陷引发的安全漏洞
因设置或设计上的缺陷引发的安全漏洞是指，错误设置Web服务器，或是由设计上的一些问题引起的安全漏洞。

11.3.1——强制浏览
强制浏览（Forced Browsing）安全漏洞是指，从安置在Web服务器的公开目录下的文件中，浏览那些原本非自愿公开的文件。
强制浏览有可能会造成以下一些影响：
1.泄露顾客的个人信息等重要情报
2.泄露原本需要具有访问权限的用户才可查阅的信息内容
3.泄露未外接到外界的文件
对那些原本不愿公开的文件，为了保证安全会隐蔽其URL。可一旦知道了那些URL，也就意味着可浏览URL对应的文件。直接显示容易推测的文件名或文件目录索引时，通过某些方法可能会使URL产生泄露。
详细例子见P233

11.3.2——不正确的错误消息处理
不正确的错误消息处理（Error Handling Vulnerability）的安全漏洞是指，Web应用的错误信息内包含对攻击者有用的信息。
与Web应用有关的主要错误信息如下所示：
1.Web应用抛出的错误消息
2.数据库等系统抛出的错误消息
Web应用不必在用户的浏览画面上展现详细的错误消息，对攻击者来说，详细的错误消息很可能给他们下一次攻击以提示。
详细例子见P235

11.3.3——开放重定向
开放重定向（Open Redirect）是一种对指定的任意URL作重定向跳转的功能。
而与此功能相关联的安全漏洞是指，假如指定的重定向URL到某个具有恶意的Web网站，那么用户就会被诱导至那个Web网站。
详细例子见P237

11.4——因会话管理疏忽引发的安全漏洞
会话管理是用来管理用户状态的必备功能，但是如果在会话管理上有所疏忽，就会导致用户的认证状态被窃取等后果。

11.4.1——会话劫持
会话劫持（Session Hijack）是指攻击者通过某种手段拿到了用户的会话ID，并非法使用此会话ID伪装成用户，达到攻击目的。
具备认证功能的Web应用，使用会话ID的会话管理机制，作为管理认证状态的主流方式。会话ID中记录客户端的Cookie等信息，服务器端将会话ID与认证状态进行一对一匹配管理。
下面列举了几种攻击者可获取会话ID的途径：
1.通过非正规的生成方法推测会话ID
2.通过窃听或XSS攻击盗取会话ID
3.通过会话固定攻击（Session Fixation）强行获取会话ID
详细例子见P238

11.4.2——会话固定攻击
对以窃取目标会话ID为主动攻击手段的会话劫持而言，会话固定攻击（Session Fixation）攻击会强制用户使用攻击者指定的会话ID，属于被动攻击。
详细例子见P239

11.4.3——跨站点请求伪造
跨站点请求伪造（Cross-Site Request Forgeries，CSRF）攻击是指攻击者通过设置好的陷阱，强制对已完成认证的用户进行非预期的个人信息或设定信息等某些状态更新，属于被动攻击。
跨站点请求伪造有可能会造成以下等影响：
1.利用已通过认证的用户权限更新设定信息等
2.利用已通过认证的用户权限购买商品
3.利用已通过认证的用户权限在留言板上发表言论
详细例子见P241

11.5——其他安全漏洞
11.5.1——密码破解
密码破解攻击（Password Cracking）即算出密码，突破认证。攻击不仅限于Web应用，还包括其他的系统（如FTP或SSH等）。
密码破解有以下两种手段：
1.通过网络的密码试错
2.对已加密密码的破解（指攻击者入侵系统，已获得加密或散列处理的密码数据的情况）
除去突破认证的攻击手段，还有SQL注入攻击逃避认证，跨站脚本攻击窃取密码信息等手段。
一：通过网络进行密码试错
对Web应用提供的认证功能，通过网络尝试候选密码进行的一种攻击，主要有以下两种方式。
1.穷举法
穷举法（Brute-force Attack，又称暴力破解法）是指对所有密码集合构成的密钥空间（Keyspace）进行穷举。
2.字典攻击
字典攻击是指利用事先收集好的候选密码（经过各种组合方式后存入字典），枚举字典中的密码，尝试通过认证的一种攻击手法。
字典攻击中有一种利用其它Web网站已泄露的ID及密码列表进行的攻击（撞库）。
二：对已加密密码的破解
Web应用在保存密码时，一般不会直接以明文的方式保存，通过散列函数做散列处理货加salt的手段对要保存的面膜本身加密。
那么即使攻击者使用某些手段窃取密码数据，如果想要真正使用这些密码，则必须先通过解码等手段，把加密处理的密码还原成明文形式。
从吉阿米果的数据中导出明文通常有以下几种方法：
1.通过穷举法·字典攻击进行类推
针对密码使用散列函数进行加密处理的情况，采用和穷举法或字典攻击相同的手法，尝试调用相同的散列函数加密候选密码，然后把计算出的散列值与目标散列值匹配，类推出密码。
2.彩虹表
彩虹表（Rainbow Table）是由明文密码及与之对应的散列值构成的一张数据表，是一种通过事先制作庞大的彩虹表，可在穷举法·字典攻击等实际破解过程中缩短消耗时间的机巧。
3.拿到密钥
使用共享密钥加密方式对密码数据进行加密处理情况下，如果能通过某种手段拿到加密使用的密钥，也就可以对密码数据解密了。
4.加密算法的漏洞
考虑到加密算法本身可能存在的漏洞，利用该漏洞尝试解密也是一种可行的方法，但是很难。

11.5.2——点击劫持
点击劫持（Clickjacking）是指利用透明的按钮或链接做成陷阱，覆盖在Web页面上，然后诱使用户在不知情的情况下，点击那个链接访问内容的一种攻击手段，这种行为又称为界面伪装（UI Redressing）。
详细例子见P248

11.5.3——DoS攻击
DoS攻击（Denial of Service attack）是一种让运行中的服务呈停止状态的攻击。有时也叫做服务停止攻击或拒绝服务攻击。
DoS攻击的对象不仅限于Web网站，还包括网络设备及服务器等。
主要有以下两种DoS攻击方式：
1.集中利用访问请求造成资源过载，资源用尽的同时，实际上服务也就呈停止状态
2.通过攻击安全漏洞使服务停止
其中，集中利用访问请求的DoS攻击，单纯来讲就是发送大量的合法请求；服务器很难分辨何为正常请求，何为攻击请求，因此很难防止DoS攻击。
多台计算机发起的DoS攻击称为DDoS攻击（Distributed Denial of Service Attack）。
DDoS攻击通常利用那些感染病毒的计算机作为攻击者的攻击跳板。

11.5.4——后门程序
后门程序（Backdoor）是指开发设置的隐藏入口，可不按正常步骤使用受限功能，利用后门程序就能够使用原本受限制的功能。
通常的后门程序分为以下3种类型：
1.开发阶段作为Debug调用的后门程序
2.开发者为了自身利益植入的后门程序
3.攻击者通过某种方法设置的后门程序
可通过监视进程和通信的状态发现被植入的后门程序，但设定在Web应用中的后门程序，由于和正常使用时区别不大，通常很难发现。