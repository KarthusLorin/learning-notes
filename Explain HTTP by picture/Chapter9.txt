Chapter9：基于HTTP的功能追加协议

9.1——基于HTTP的协议
HTTP功能上的不足可以通过创建一套全新的协议来弥补，可是目前基于HTTP协议的Web浏览器的使用环境已遍布全世界，因此无法完全抛弃HTTP。
有一些新协议的规则是基于HTTP的，并在此基础上添加了新功能。

9.2——消除HTTP瓶颈的SPDY
Google在2010年发布了SPDY（取自SPeeDY，发音同speedy），其开发目标旨在解决HTTP的性能瓶颈，缩短Web页面的加载时间（20%）。

9.2.1——HTTP的瓶颈
在Facebook和Twitter等SNS（Social Networking Service）网站上，几乎能够实时观察到海量用户公开发布的内容。当几百、几千万的用户发布内容时，Web网站为了保存这些内容，在短时间内就会发生大量更新。
为了尽可能实时地显示这些更新的内容，服务器上一有内容更新就直接把那些内容反馈到客户端的界面上。虽然这很简单，但是HTTP却无法妥善地处理好这项任务。
使用HTTP协议探知服务器上是否有内容更新，就必须频繁地从客户端到服务器端进行确认。如果服务器上没有内容更新，那么就会产生徒劳的通信。
若想在现有Web实现所需的功能，以下这些HTTP标准就会成为瓶颈：
1.一条连接上只可发送一个请求。
2.请求只能从客户端开始，客户端不可以接收除响应以外的指令。
3.请求/响应首部未经压缩就发送，首部信息越多延迟就打。
4.发送冗长的首部，每次互相发送相同的首部造成的浪费较多。
5.可任意选择数据压缩格式，非强制压缩发送。
一：Ajax的解决方法
Ajax（Asynchronous JavaScript and XML，异步JavaScript与XML技术）是一种有效利用JavaScript和DOM（Document Object Model，文档对象模型）的操作，以达到局部Web页面替换加载的异步通信手段。
和以前的同步通信相比，由于它只更新一部分页面，响应中传输的数据量会因此而减少，这一优点显而易见。
Ajax的核心技术是名为XMLHttpRequest的API，通过JavaScript脚本语言的调用就能和服务器进行HTTP通信，借由这种手段，就能从已加载完毕的Web页面上发起请求，只更新局部页面。
而利用Ajax实时地从服务器获取内容，有可能会导致大量请求产生，另外，Ajax仍未解决HTTP协议本身存在的问题。
二：Comet的解决方法
一旦服务器端有内容更新了，Comet不会让请求等待，而是直接给客户端返回响应。这是一种通过延迟应答，模拟实现服务器端向客户端推送（ServerPush）的功能。
通常，服务器端接收到请求，在处理完毕后就会立即返回响应，但为了实现推送功能，Comet会先将响应置于挂起状态，当服务器端有内容更新时，再返回该响应。
内容上虽然可以做到实时更新，但为了保留响应，一次连接的持续时间也变长了。期间，为了维持连接会消耗更多的资源。另外，Comet也仍未解决HTTP协议本身存在的问题。
三：SPDY的目标
陆续出现的Ajax和Comet等提高易用性的技术，一定程度上使HTTP得到了改善，但HTTP本身的限制也令人有些束手无策，为了进行根本性的改善，需要有一些协议层面上的改动。
处于持续开发状态中的SPDY协议，正是为了在协议级别消除HTTP所遭遇的瓶颈。

9.2.2——SPDY的设计与功能
SPDY没有完全改写HTTP协议，而是在TCP/IP的应用层与运输层之间通过新加会话层的形式运作，同时，考虑到安全性问题，SPDY规定通信中使用SSL。
SPDY以会话层的形式加入，控制对数据的流动，但还是采用HTTP建立通信连接，因此，可照常使用HTTP的GET和POST等方法、Cookie以及HTTP报文等。
使用SPDY后，HTTP协议额外获得以下功能：
1.多路复用流：通过单一的TCP连接，可以无限制处理多个HTTP请求，所有请求的处理都在一条TCP连接上完成，因此TCP的处理效率得到提高。
2.赋予请求优先级：SPDY不仅可以无限制地并发处理请求，还可以给请求诸葛分配优先级顺序，这样主要是为了在发送多个请求时，解决因带宽低而导致响应变慢的问题。
3.压缩HTTP首部：压缩HTTP请求和响应的首部，这样一来，通信产生的数据包数量和发送的字节数就更少了。
4.推送功能：支持服务器主动向客户端推送数据的功能，这样，服务器可直接发送数据，而不必等待客户端的请求。
5.服务器提示功能：服务器可以主动提示客户端请求所需的资源，由于在客户端发现资源之前就可以获知资源的存在，因此在你资源已缓存等情况下，可以避免发送不必要的请求。

9.3——使用浏览器进行全双工通信的WebSocket
利用Ajax和Comet技术进行通信可以提升Web的浏览速度，但问题在于通信若使用HTTP协议，就无法彻底解决瓶颈问题，WebSocket网络技术正是为解决这些问题而实现的一套新协议及API。

9.3.1——WebSocket的设计与功能
WebSocket，即Web浏览器与Web服务器之间全双工通信标准，主要是为了解决Ajax和Commet里XMLHttpRequest附带的缺陷所引发的问题。

9.3.2——WebSocket协议
一旦Web服务器与客户端之间建立起WebSocket协议的通信连接，之后所有的通信都依靠这个专用协议进行。通信中可互相发送JSON、XML、HTML或图片等任意数据的格式。
由于是建立在HTTP基础上的协议，因此连接的发起方仍是客户端，而一旦确立WebSocket通信连接，不论服务器还是客户端，任意一方都可直接向对方发送报文。
下面列举WebSocket协议的主要特点：
1.推送功能：支持由服务器向客户端推送数据的推送功能，这样，服务器可直接发送数据，而不必等待客户端的请求。
2.减少通信量：只要建立起WebSocket连接，就希望一直保持连接状态。和HTTP相比，不但每次连接时的总开销减少，而且由于WebSocket的首部信息很少，通信量也相应减少。
为了实现WebSocket通信，在HTTP连接建立之后，需要完成一次“握手”（Handshaking）的步骤。
一：握手·请求
为了实现WebSocket通信，需要用到HTTP的Upgrade首部字段，告知服务器通信协议发生改变，以达到握手的目的。
Upgrade: websocket
Sec-websocket-Key字段内记录着握手过程中必不可少的键值，Sec-WebSocket-Protocol字段内记录使用的自协议。
子协议WebSocket协议标准在连接分开使用时，定义那些连接的名称。
二：握手·响应
对于之前的响应，返回状态码101 Switching Protocols的响应。
Sec-WebSocket-Accept的字段值是由握手请求中的Sec-WebSocket-Key的字段值生成的。
成功握手确立WebSocket连接之后，通信时不再使用HTTP的数据帧，而采用WebSocket独立的数据帧。
三：WebSocket API
JS可调用"The WebSocket API"（http://www.w3.org/TR/websockets/，由W3C标准制定）内提供的WebSocket程序接口，以实现WebSocket协议下全双工通信。

9.4——期待已久的HTTP/2.0（不重要）
HTTP/2.0的目标是改善用户在使用Web时的速度体验

9.5——Web服务器管理文件的WebDAV
WebDAV（Web-based Distributed Authoring and Versioning，基于万维网的分布式创作和版本控制）是一个可对Web服务器上的内容直接进行文件复制、编辑等操作的分布式文件系统。
除了创建、删除文件等基本功能，它还具备文件创建者管理、文件编辑过程中禁止其他用户内容覆盖的加锁功能，以及对文件内容修改的版本控制功能。
使用HTTP/1.1的PUT方法和DELETE方法，就可以对Web服务器上的文件进行创建和删除操作，可是出于安全性及便捷性等考虑，一般不适用。

