Chapter7：确保Web安全的HTTPS

7.1——HTTP的缺点
HTTP主要有这些不足，如下：
1.通信使用明文（不加密），内容可能会被窃听。
2.不验证通信方的身份，因此有可能遭遇伪装。
3.无法证明报文的完整性，所以有可能已遭篡改。
另外，用Java和PHP等编程语言开发的Web应用也可能存在安全漏洞。

7.1.1——通信使用明文可能会被窃听
由于HTTP本身不具备加密的功能，所以也无法做到对通信整体（使用HTTP协议通信的请求和响应的内容）进行加密，即，HTTP报文使用明文方式发送。
一：TCP/IP是可能被窃听的网络
按TCP/IP协议族的工作机制，通信内容在所有的通信线路上都有可能遭到窥视。
即使已经经过加密的通信，也会被窥视到通信内容，这点和未加密的通信时相同的。
只是说，如果通信经过加密，就有可能让人无法破解报文信息的含义，但加密处理后的报文信息本身还是会被看到的。
如何窃听？
只需要收集在互联网上流动的数据包（帧）就行了，对于收集来的数据包的解析工作，可交给那些抓包（Packet Capture）或嗅探器（Sniffer）工具。
二：加密处理防止被窃听
在目前正在研究的如何防止窃听保护信息的几种对策中，最为普及的就是加密技术，加密的对象可以有这么几个：
1.通信的加密
HTTP协议中没有加密机制，但可以通过和SSL（Secure Socket Layer，安全套接层）或TLS（Transport Layer Security，安全传输层协议）的组合使用，加密HTTP的通信内容。
用SSL建立安全通信线路之后，就可以在这条线路上运行HTTP通信了，与SSL组合使用的HTTP被称为HTTPS（HTTP Secure，超文本传输安全协议）或HTTP over SSL。
2.内容的加密
还有一种将参与通信内容本身加密的方式，由于HTTP协议中没有加密机制，那么就对HTTP协议传输的内容本身加密，即把HTTP报文里所含的内容进行加密处理。
在这种情况下，客户端需要对HTTP报文进行加密处理后再发送请求。
为了做到有效的内容加密，前提是要求客户端和服务器同时具备加密和解密机制，主要应用在Web服务中。
由于该方式不同于SSL或TLS将整个通信线路加密处理，所以内容仍然有被篡改的风险。

7.1.2——不验证通信方的身份就可能遭遇伪装
HTTP协议中的请求和响应不会对通信方进行确认，也就是说存在“服务器是否就是发送请求中URI真正指定的主机，返回的响应是否真的返回到实际提出请求的客户端”等类似问题。
一：任何人都可发起请求
在HTTP协议通信时，由于不存在确认通信方的处理步骤，任何人都可以发起请求，另外，服务器只要接收到请求，不管对方是谁都会返回一个响应。
HTTP协议的实现本身非常简单，不论是谁发送过来的请求都会范围响应，因此不确认通信方，会存在以下各种隐患。
1.无法确认请求发送至目标的Web服务器是否是按真实意图返回响应的那台服务器，可能是已伪装的Web服务器。
2.无法确定响应返回到的客户端是否是按真实意图接收响应的那个客户端，有可能是已伪装的客户端。
3.无法确定正在通信的对方是否具备访问权限，因为某些Web服务器上保存着重要信息，只想发给特定用户通信的权限。
4.无法判定请求来自何方、出自谁手。
5.即使是无意义的请求也会照单全收，无法阻止海量请求下的Dos攻击（Denial of Service，拒绝服务攻击）
二：查明对手的证书
虽然使用HTTP协议无法确认通信方，但如果使用SSL则可以。
SSL不仅提供加密处理，而且还使用了一种被称为证书的手段，可用于确认方。
证书由值得信任的第三方颁发，用以证明服务器和客户端是实际存在的，另外，伪造证书从技术角度来说是异常困难的一件事。
所以，只要能够确认通信方（服务器或客户端）持有的证书，即可判断通信方的真实意图。

7.1.3——无法证明报文完整性，可能已遭篡改
所谓完整性是指信息的准确度，若无法证明其完整性，通常也就意味着无法判断信息是否准确。
一：接收到的内容可能有误
由于HTTP协议无法证明通信报文的完整性，因此，在请求或响应送出之后直到对方接收到之前的这段时间内，即使请求或响应的内容遭到篡改，也没有办法获取。
在请求或响应再传输途中，遭攻击者拦截并篡改内容的攻击称为中间人攻击（Man-in-the-Middle attrack，MTM）。
二：如何防止篡改
虽然有使用HTTP协议确认报文完整性的办法，但事实上，并不便捷、可靠。其中常用的是MD5和SHA-1等散列值校验的方法，以及用来确认文件的数字签名方法。
提供文件下载服务的Web网站也会提供相应的以PGP（Pretty Good Privacy，完美隐私）创建的数字签名及MD5算法生成的散列值。
PGP是用来证明创建文件的数字签名，MD5是由单向函数生成的散列值。
不论哪种方法，都需要操纵客户端的用户本人亲自检查验证下载的文件是否就是原来服务器上的文件，浏览器无法自动帮用户检查。
可惜的是，用这些方法也依然无法百分百保证确认结果正确，因为PGP和MD5本身被改写的话，用户是没有办法意识到的。
为了有效防止这些弊端，有必要使用HTTPS。
SSL提供认证和加密处理及摘要功能，仅靠HTTP确保完整性是非常困难的，因此通过和其他组合来实现这个目标。

7.2——HTTP+加密+认证+完整性保护=HTTPS

7.2.1——HTTP加上加密处理和认证以及完整性保护后即使HTTPS
如果在HTTP协议通信过程中使用未经加密的明文，比如在Web页面中输入信用卡号，如果这条通信线路遭到窃听，那么信用卡号就暴露了。
同时，有可能并不是和原本预想的通信方在实际通信，并且还要考虑到接收到的报文在通信途中已经遭到篡改这一可能性。
为了统一解决上述这些问题，需要在HTTP上再加入加密处理和认证等机制。
我们把添加了加密和认证机制的HTTP称为HTTPS（HTTP Secure）。

7.2.2——HTTPS是身披SSL外壳的HTTP
HTTPS并非是应用层的一种新协议，只是HTTP通信接口部分用SSL和TLS协议代替而已。
通常，HTTP直接和TCP通信。当使用SSL时，则演变成先和SSL通信，再由SSL和TCP通信。
简而言之，所谓HTTPS，其实就是身披SSL协议这层外壳的HTTP。
在采用SSL后，HTTP就拥有了HTTPS的加密、证书和完整性保护这些功能。
SSL是独立于HTTP协议，所以不光是HTTP协议，其他运行在应用层的SMTP和Telnet等协议均可配合SSL协议使用。

7.2.3——相互交换密钥的公开秘钥加密技术
SSL采用一种叫做公开密钥加密（Public-key cryptography）的加密处理方式。
近代的加密方法中加密算法是公开的，而密钥却是保密的，通过这种方式得以保持加密方法的安全性。
加密和解密都会用到密钥，没有密钥就无法对密码破解，反过来说，任何人只要持有密钥就能解密了。
一：共享密钥加密的困境
加密和解密用一个密钥的方式称为共享密钥加密（Common key crypto system），也被叫做对称密钥加密。
以共享密钥加密时，必须将密钥也发给对方，可究竟怎样才能安全地转交？
在互联网上转发密钥时，如果通信被监听那么密钥就会落入攻击者之手，同时也失去了加密的意义，另外还得设法安全地保管接收到的密钥。
二：使用两把密钥的公开密钥加密
公开密钥加密方式很好地解决了共享密钥加密的困难。
公开密钥加密使用一对非对称的密钥，一把叫做私有密钥（private key），另一把叫做公开密钥（public key）。
顾名思义，私有密钥不能让其他任何人知道，而公开密钥则可以随意发布，任何人都可以获得。
使用公开密钥加密方式，发送密文的一方使用对方的公开密钥进行加密处理，对方收到被加密的信息后，再使用自己的私有密钥进行解密。
利用这种方式，不需要发送用来解密的私有密钥，也不必担心密钥被攻击者窃听而盗走。
三：HTTPS采用混合加密机制
HTTPS采用共享密钥加密和公开密钥加密两者并用的混合加密机制。
若密钥能够实现安全交换，那么就有可能会考虑仅使用公开密钥加密来通信。但是公开密钥加密与共享密钥加密相比，其处理速度要慢。
所以，在交换密钥环节使用公开密钥加密方式，之后的建立通信交换报文阶段则使用共享密钥加密方式。