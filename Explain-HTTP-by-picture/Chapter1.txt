Chapter1：了解Web及网络基础

TCP/IP概念：
通常使用的网络（包括互联网）是在TCP/IP协议簇的基础上运作的。而HTTP属于它内部的一个子集。
何为TCP/IP?
计算机与网络设备要互相通信，双方就必须基于相同方法。比如，如何探测到通信目标、由哪一边先发起通信、使用哪种语言进行通信、怎样
结束通信等规划都需要事先确定。不同的硬件、操作系统之间的通信，所有的这一切都需要一种规则。而我们就把这种规则称之为协议（protocol）。
像这样把与互联网相关联的协议集合起来总称为TCP/IP。
也有说法认为，TCP/IP是指TCP和IP这两种协议。
也有一种说法认为，TCP/IP是在IP协议的通信过程中，使用到的协议族的统称。

TCP/IP的分层管理：
TCP/IP协议族按层次分别分为以下四层：应用层、传输层、网络层和数据链路层。
应用层：决定向用户提供应用服务时通信的活动。HTTP协议也处于该层。
传输层：传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。该层有两个性质不同的协议：TCP（传输控制协议）和UDP（用户数据报协议）。
网络层（又名网络互连层）：网络层用来处理在网络上流动的数据包。数据包是网络传输的最小数据单位。该层规定了通过怎样的路径（所谓的传输
路线）到达对方计算机，并把数据包传送给对方。与对方计算机之间通过多台计算机或网络设备进行传输时，网络层起的作用就是在众多选项中
选择一条传输线路。
链路层（又名数据链路层，网络接口层）：用来处理链接网络的硬件部分。包括控制操作系统、硬件的设备驱动、NIC（网卡），以及光纤等物理
可见部分（还包括连接器等一切传输媒介）。硬件上的范畴均在链路层的作用范围之内。

TCP/IP通信传输流：
利用TCP/IP协议族进行网络通信时，会通过分层顺序与对方进行通信。发送端从应用层往下走，接收端则从应用层往上走。
例如：应用层发出HTTP请求，在传输层把从应用层处收到的数据（HTTP请求报文）进行分割，并在各个报文上打上标记序号以及端口号转发给网络层，
在网络层（IP协议），增加作为通信目的地的MAC地址后转发给链路层。
发送端在层与层之间传输数据时，每经过一层时，必定会打上一个该层所属的首部信息。反之，接收端在层与层传输数据时，每经过一层时，会把相应的首部消去。
这种把数据信息包装起来的做法称为封装（encapsulate）。

与HTTP关系密切的协议：IP、TCP和DNS
一：负责传输的IP协议
按层次分，IP（Internet Protocol）网际协议位于网络层。所有使用网络的系统都会用到IP协议。IP协议的作用是把各种数据包传送给对方。
而要保证确实传送到对方那里，则需要满足各类条件。其中两个重要的条件是IP地址和MAC地址。
IP地址指明了节点被分配到的地址，MAC地址是指网卡所属的固定地址。IP地址可变化，MAC地址不可变。
使用ARP协议凭借MAC地址进行通信。
ARP协议：ARP是一种用以解析地址的协议，根据通信方的IP地址就可以反查出对应的IP地址。
没人可以全面掌握互联网中的传输状况，在到达通信目标的中转过程中，那些计算机和路由器等网络设备只能获悉很粗略的传输线路。这种机制称为路由选择。
二：确保可靠性的TCP协议
按层次分，TCP位于传输层，提供可靠的字节流服务。
所谓的字节流服务是指，为了方便传输，将大块数据分割成以报文段为单位的数据包进行管理。而可靠的传输服务是指，能够把数据精确可靠地传给对方。
为了准确无误地将数据送达目标处，TCP协议采用了三次握手策略。
握手过程中使用了TCP的标志（flag）——SYN（synchronize）和ACK（acknowledgement）。
三次握手：发送端首先发送一个带有SYN标志的数据包给对方；接收端收到后，回传一个带有SYN/ACK标志的数据包以示传达确认信息；最后，发送端再回传一个带有ACK标志的数据包，代表“握手”结束。
三：负责域名解析的DNS服务
DNS服务时和HTTP协议一样位于应用层的协议，它提供域名到IP地址之间的解析服务。
DNS协议提供通过域名查找IP地址，或逆向从IP地址反查询域名的服务。

URI与URL
URI（统一资源标识符）
URI是Uniform Resource Identifier的缩写。
Uniform：规定统一的格式可方便处理多种不同类型的资源，而不用根据上下文环境来识别资源指定的访问方式。
Resource：资源的定义是“可标识的任何东西”。资源不仅可以是单一的，也可以是多数的集合体。
Identifier：表示可标识的对象。也称为标识符。
综上所述，URI就是某个协议方案表示的资源的定位标识符。协议方案是指访问资源所使用的协议类型名称，如http、ftp等。
URI用字符串标识某一互联网资源，而URL表示资源的地点（互联网上所处的位置）。
所以，URL是URI的子集。

URI格式
表示指定的URI，要使用涵盖全部必要信息的绝对URI、绝对URL以及相对URL。
相对URL，是指从浏览器中基本URI处指定的URL，形如/image/logo.gif。
绝对URL范例：http://（协议方案名）user:pass@（登录信息（认证））www.example.jp（服务器地址）:80（服务器端口号）/dir/index.html?（带层次的文件路径）uid=1（查询字符串）#ch1（片段标识符）
登录信息（认证）：指定用户名和密码作为从服务器端获取资源时必要的登录信息（身份认证）。此项是可选项。
服务器地址：使用绝对URI必须指定待访问的服务器地址。地址可以是类似hack.jp这种DNS可解析的名称，或是192.168.1.1这类IPv4地址名，还可以是[0:0:0:0:0:0:0:1]这样用方括号括起来的IPv6地址名。
服务器端口号：指定服务器连接的网络端口号。此项可选，若用户省略，则自动使用默认端口号。
带层次的文件路径：指定服务器上的文件路径来定位特指的资源。这与UNIX系统的文件目录结构类似。
查询字符串：针对已指定的文件路径内的资源，可以使用查询字符串传入任意参数。此项可选。
片段标识符：使用片段标识符通常可标记出已获取资源中的子资源（文档内的某个位置）。但在RFC中并没有明确规定其使用方法。该项也为可选项。