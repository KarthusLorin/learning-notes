Chapter5——数组

5.1~5.3

5.1——创建数组、数组操作
数组是值的有序集合，每个值叫做元素，每个元素在数组中都有数字位置编号，也就是索引。
JS中的数组是弱类型的，数组中可以含有不同类型的元素，数组元素甚至可以是对象或其它数组。
例子：
var arr = [1,true,null,undefined,{x:1},[1,2,3]];

一：创建数组-字面量方法
var BAT = ['Alibaba','Tencent','Baidu'];
var students = [{name:'Bosn',age:27},{name:'Nunnly',age:3}];
var arr = ['Nunnly','is','big','keng','B',123,true,null];
var arrInArr = [[1,2],[3,4,5]];
var commasArr1 = [1,,2];                            //1,undefined,2
var commasArr2 = [,,];                              //undefined * 2（数组允许最后多余一个逗号，所以以逗号结尾不会默认增加一个undefined）
注意：数组大小是由限制的——size from 0 to 4294967295(2^23-1)

二：创建数组——new Array
var arr = new Array();
var arrWithLength = new Array(100);                 //undefined * 100
var arrLikesLiteral = new Array(true,false,null,1,2,"hi");
//等价于[true,false,null,1,2,"hi"];
使用new Array创建数组时，当传入多个参数时，同字面量方法

三：数组元素的读写
var arr = [1,2,3,4,5];
arr[1];                                             //2
arr.length;                                         //5
arr[5] = 6;                                         //通过赋值可以动态的添加数组的长度
arr.length;                                         //6
delete arr[0];                      
arr[0];                                             //undefined

四：数组元素的增删
JS中的数组是动态的，无需指定大小。

var arr = [];
arr[0] = 1;
arr[1] = 2;
arr.push(3);
arr;                                                //[1,2,3]
arr[arr.length] = 4;                                //equal to arr.push(4)
arr;                                                //[1,2,3,4]
arr.unshift(0);                                     
arr;                                                //[0,1,2,3,4];
delete arr[2];                                      //delete掉之后，相当于把那个元素变为undefined
arr;                                                //[0,1,undefined,3,4]
arr.length;                                         //5
2 in arr;                                           //false
arr.length -= 1;                                    //直接改变数组大小可以删除元素
arr;                                                //[0,1,undefined,3],4 is removed
arr.pop();                                          //3 returned by pop
arr;                                                //[0,1,undefined],3 is removed
arr.shift();                                        //0 returned by shift
arr;                                                //[1,undefined]

五：数组迭代
var i = 0,n = 10;
var arr = [1,2,3,4,5];
for(;i < n;i++){
    console.log(arr[i]);                            //1,2,3,4,5
}
for(i in arr){
    console.log(arr[i]);                            //1,2,3,4,5
}

Array.prototype.x = 'inherited';                    //给数组增加一个原型属性
for(i in arr){
    console.log(arr[i]);                            //1,2,3,4,5,inherited（由于for...in会把原型上的属性也给遍历出来，所以inherited也出来了）
}
for(i in arr){
    if(arr.hasOwnProperty(i)){                      //通过条件语句筛去原型属性
        console.log(arr[i]);                        //1,2,3,4,5
    }
}

5.2——二维数组、稀疏数组

一：二维数组
遍历二维数组的例子：
var arr = [[0,1],[2,3],[4,5]];
var i = 0,j = 0;
var row;
for(;i < arr.length;i++){
    row = arr[i];
    console.log('row' + i);
    for(j = 0;j < row.length;j++){
        console.log(row[j]);
    }
}

二：稀疏数组
稀疏数组并不含有从0开始的连续索引，一般length属性值比实际元素个数大。
一般可以用：索引值 in 数组 来判断某个索引是否存在。
var arr1 = [undefined];
var arr2 = new Array(1);
0 in arr1;                                          //true
0 in arr2;                                          //false
arr1.length = 100;                          
arr1[99] = 123;     
99 in arr1;                                         //true
98 in arr1;                                         //false

var arr = [,,];
0 in arr;                                           //false

5.3——数组方法（重点）

一：Array.prototype.join
join方法的功能就是将数组转化为字符串。
语法：
arrayObject.join(separator)
separator：可选。指定要使用的分隔符。如果省略该参数，则使用逗号作为分隔符。

例1：
var arr = [1,2,3];
arr.join();                                         //"1,2,3"
arr.join("_");                                      //"1_2_3"

例2：
function repeatString(str,n){
    return new Array(n + 1).join(str);              //将str作为分隔符，而本身数组只有长度，相当于复制数组长度个的str
}
repeatString("a",3);                                //"aaa"
repeatString("Hi",5);                               //"HiHiHiHiHi"

二：Array.prototype.reverse
reverse方法的功能就是颠倒数组中元素的顺序。
语法：
arrayObject.reverse()
注意：该方法会改变原来的数组，而不会创建新的数组。

例子：
var arr = [1,2,3];
arr.reverse();                                      //[3,2,1]
arr;                                                //[3,2,1]

三：Array.prototype.sort
sort() 方法用于对数组的元素进行排序。
语法:
arrayObject.sort(sortby)
sortby：可选。规定排序顺序。必须是函数。
该函数要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字。比较函数应该具有两个参数 a 和 b，其返回值如下：
若 a 小于 b，在排序后的数组中 a 应该出现在 b 之前，则返回一个小于 0 的值。
若 a 等于 b，则返回 0。
若 a 大于 b，则返回一个大于 0 的值。
注意：数组在原数组上进行排序，不生成副本。

例1：
var arr = ["a","d","c","b"];
arr.sort();                                         //["a","b","c","d"]

例2：
var arr = [13,24,51,3];     
arr.sort();                                         //[13,24,3,51]，sort把它们转化为了字符串然后排序
arr;                                                //[13,24,3,51]，原数组被修改
arr.sort(function(a,b){                             
    return a - b;
});                                                 //[3,13,24,51]

例3：
arr = [{age:25},{age:39},{age:99}];
arr.sort(function(a,b){
    return a.age - b.age;
});
arr.forEach(function(item){
    console.log('age',item.age);
})
//age 25
//age 39
//age 99

四：Array.prototype.concat
concat() 方法用于连接两个或多个数组。
语法：
arrayObject.concat(arrayX,arrayX,......,arrayX)
arrayX：必需。该参数可以是具体的值，也可以是数组对象。可以是任意多个。
注意：该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。

例子：
var arr = [1,2,3];
arr.concat(4,5);                                    //[1,2,3,4,5]
arr;                                                //[1,2,3]，原数组未被修改
arr.concat([10,11],13);                             //[1,2,3,10,11,13]
arr.concat([1,[2,3]]);                              //[1,2,3,1,[2,3]]，如果参数是数组的数组，concat只会转换一次，所以结果中还包含数组

五：Array.prototype.slice
slice() 方法可从已有的数组中返回选定的元素。
语法:
arrayObject.slice(start,end)
start：必需。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。
end：可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。
注意：
1.该方法并不会修改数组，而是返回一个子数组。如果想删除数组中的一段元素，应该使用方法 Array.splice()。
2.end不会取到

例子：
var arr = [1,2,3,4,5];
arr.slice(1,3);                                     //[2,3]
arr.slice(1);                                       //[2,3,4,5]
arr.slice(1,-1);                                    //[2,3,4]
arr.slice(-4,-3);                                   //[2]

六：Array.prototype.splice
splice() 方法向/从数组中添加/删除项目，然后返回被删除的项目。（拼接）
语法：
arrayObject.splice(index,howmany,item1,.....,itemX)
index：必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。
howmany：必需。要删除的项目数量。如果设置为 0，则不会删除项目。
item1, ..., itemX：可选。向数组添加的新项目。
注意：如果从 arrayObject 中删除了元素，则返回的是含有被删除的元素的数组，会修改原数组。

var arr = [1,2,3,4,5];
arr.splice(2);                                      //[3,4,5]
arr;                                                //[1,2]，原数组被修改
arr = [1,2,3,4,5]; 
arr.splice(2,2);                                    //[3,4]
arr;                                                //[1,2,5]
arr= [1,2,3,4,5];           
arr.splice(1,1,'a','b');                            //[2]
arr;                                                //[1,"a","b",3,4,5]

