Chapter1——数据类型

1.2——JavaScript六种数据类型
1.number
2.string
3.boolean
4.null
5.undefined
前五种是原始类型
6.object——对象类型
Function，Array，Date等这些也是object对象类型
总的来说：
原始类型{number,string(字符串),boolean（布尔值）,null,undefined}
对象类型{object（function(函数)，array(数组)，date(日期)）}

1.3——JavaScript隐式转换
例子：
var x = 'The answer is ' + 42   //'The answer is 42'
"37" - 7                        //30    减号理解为减法运算
"37" + 7                        //377   加号理解为字符串拼接
所以，可以巧用+/-规则转换类型
string - 0                      //变为number
number + ''                     //变为string

一：关于"==="
当执行严格等于——"==="时，顺序如下：
类型不同，返回false
类型相同：执行"=="
常见问题：
null === null                   //true
undefined === undefined         //true
NaN === NaN                     //false 注意，两个NaN都是不相等的——NaN != NaN
new Object === new Object       //false JS中对象比较的是对象的引用，虽然有可能对象值完全相等，但是，它们引用的不是一个对象，所以不严格相等

二：关于"=="
类型相同，同"==="
类型不同，尝试类型转换和比较
null == undefinde               //true
number == string                //string转number
例子：1 == "1.0"                 //true
boolean == ?                    //boolean转化为number，true为1，false为0
例子：1 == true                  //true
object == number | string       //对象转为基本类型
例子：new String('hi') == 'hi'   //true
其他情况为false
常见问题：
"1.23" == 1.23                  //true
0 == false                      //true
null == undefined               //true
new Object() == new Object()    //true
[1,2] == [1,2]                  //true

1.4——JavaScript包装对象
number、string、boolean这三种基本类型都有各自的包装类
string的包装类是String Object
number的包装类是Number Object
boolean的包装类是Boolean Object

一：何为包装类？
var str = "string";
var strObj = new String("string");
str                             //"String"
strObj                          //String0: "s"1: "t"2: "r"3: "i"4: "n"5: "g"length: 6__proto__: String[[PrimitiveValue]]: "string"
strObj就是包装类的一个实例
所谓的包装类就是把一个基本类型（特指string、number、boolean）转化而成的对象。

二：包装类的运用
var a = "string";
alert(a.length);                //6
a.t = 3;                        
alert(a.t);                     //undefined
a是个基本类型，不是个对象，但是为什么a.length的值不是undefined呢？为什么明明定义了a.t的值，但是a.t输出的是undefined？
实际上，在JS中，当把一个基本类型（特指string，number，boolean）当做对象使用时，JS会自动把它们转换为各自的包装类。
而当完成访问时，这个临时的对象会被销毁，所以先设置a.t的值，然后访问得出的是undefined。

1.5——JavaScript类型检测
JS中检测类型的方法主要有以下五种：
1.typeof
2.instanceof
3.Object.prototype.toString
4.constructor
5.duck type（不常用）

一：typeof
例子：
typeof 100                      //"number"
typeof true                     //"boolean"
typeof function                 //"function"
typeof(underfined)              //"undefined"（注意）
typeof NaN                      //"number"（注意）
typeof new Object()             //"object"
typeof [1,2]                    //"object"
typeof null                     //"object"（注意）
typeof适合函数对象和基本类型的判断，但是有缺陷——null虽然是基本类型，但是返回的确实object

二：instaceof
用法：obj instanceof Object
左边的操作数要求是个对象，右边的操作数必须是个函数对象或者函数构造器。
如果左边是个基本类型，则直接返回false；如果右边不是要求的，则直接返回TypeError。
例子：
[1,2] instanceof Array === true
new Object() instanceof Array === false
注意：不同window或iframe间的对象类型检测不能使用instanceof

三：Object.prototype.toString
用法：Object.prototype.toString.apply(操作数)
例子：
Object.prototype.toString.apply([]) === "[object Array]"
Object.prototype.toString.apply(function(){}) === "[object Function]"
Object.prototype.toString.apply(null) === "[object Null]"
Object.prototype.toString.apply(undefined) === "[object Undefined]"
注意：IE6/7/8 Object.prototype.toString.apply(null)返回"[object Object]"

四：constructor
constructor属性返回对创建此对象的数组函数的引用
用法：object.constructor
例子：
Var test = [];
test.constructor === Array
注意：constructor是可以被改写的，使用时要小心

五：类型检测小结
1.typeof：适合基本类型及function检测，遇到null失效
2.[[Class]]：通过{}.toString拿到，适合内置对象和基元类型，遇到null和undefined失效（IE678等返回[object Object]）
3.instanceof：适合自定义对象，也可以用来检测原生对象，在不同iframe和window间检测时失效